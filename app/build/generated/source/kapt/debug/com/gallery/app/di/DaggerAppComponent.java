// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.di;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.arch.lifecycle.ViewModel;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.gallery.app.UserGalleryApplication;
import com.gallery.app.common.ViewModelFactory;
import com.gallery.app.common.ViewModelFactory_Factory;
import com.gallery.app.rx.SchedulersFacade_Factory;
import com.gallery.app.ui.UserActivity;
import com.gallery.app.ui.UserActivity_MembersInjector;
import com.gallery.app.ui.UserDetailsActivity;
import com.gallery.app.ui.UserDetailsActivity_MembersInjector;
import com.gallery.app.viewmodel.UserDetailsViewModel;
import com.gallery.app.viewmodel.UserDetailsViewModel_Factory;
import com.gallery.app.viewmodel.UserViewModel;
import com.gallery.app.viewmodel.UserViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<AppActivityBindingModule_UserActivity.UserActivitySubcomponent.Builder>
      userActivitySubcomponentBuilderProvider;

  private Provider<
          AppActivityBindingModule_UserDetailsActivity.UserDetailsActivitySubcomponent.Builder>
      userDetailsActivitySubcomponentBuilderProvider;

  private UserViewModel_Factory userViewModelProvider;

  private UserDetailsViewModel_Factory userDetailsViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(UserActivity.class, (Provider) userActivitySubcomponentBuilderProvider)
        .put(UserDetailsActivity.class, (Provider) userDetailsActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<android.support.v4.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends android.support.v4.app.Fragment>,
                Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.userActivitySubcomponentBuilderProvider =
        new Provider<AppActivityBindingModule_UserActivity.UserActivitySubcomponent.Builder>() {
          @Override
          public AppActivityBindingModule_UserActivity.UserActivitySubcomponent.Builder get() {
            return new UserActivitySubcomponentBuilder();
          }
        };
    this.userDetailsActivitySubcomponentBuilderProvider =
        new Provider<
            AppActivityBindingModule_UserDetailsActivity.UserDetailsActivitySubcomponent
                .Builder>() {
          @Override
          public AppActivityBindingModule_UserDetailsActivity.UserDetailsActivitySubcomponent
                  .Builder
              get() {
            return new UserDetailsActivitySubcomponentBuilder();
          }
        };
    this.userViewModelProvider = UserViewModel_Factory.create(SchedulersFacade_Factory.create());
    this.userDetailsViewModelProvider =
        UserDetailsViewModel_Factory.create(SchedulersFacade_Factory.create());
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2)
            .put(UserViewModel.class, (Provider) userViewModelProvider)
            .put(UserDetailsViewModel.class, (Provider) userDetailsViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(UserGalleryApplication arg0) {
    injectUserGalleryApplication(arg0);
  }

  private UserGalleryApplication injectUserGalleryApplication(UserGalleryApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public AppComponent build() {
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class UserActivitySubcomponentBuilder
      extends AppActivityBindingModule_UserActivity.UserActivitySubcomponent.Builder {
    private UserActivity seedInstance;

    @Override
    public AppActivityBindingModule_UserActivity.UserActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(UserActivity.class.getCanonicalName() + " must be set");
      }
      return new UserActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(UserActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class UserActivitySubcomponentImpl
      implements AppActivityBindingModule_UserActivity.UserActivitySubcomponent {
    private UserActivitySubcomponentImpl(UserActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(UserActivity arg0) {
      injectUserActivity(arg0);
    }

    private UserActivity injectUserActivity(UserActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      UserActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class UserDetailsActivitySubcomponentBuilder
      extends AppActivityBindingModule_UserDetailsActivity.UserDetailsActivitySubcomponent.Builder {
    private UserDetailsActivity seedInstance;

    @Override
    public AppActivityBindingModule_UserDetailsActivity.UserDetailsActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            UserDetailsActivity.class.getCanonicalName() + " must be set");
      }
      return new UserDetailsActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(UserDetailsActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class UserDetailsActivitySubcomponentImpl
      implements AppActivityBindingModule_UserDetailsActivity.UserDetailsActivitySubcomponent {
    private UserDetailsActivitySubcomponentImpl(UserDetailsActivitySubcomponentBuilder builder) {}

    @Override
    public void inject(UserDetailsActivity arg0) {
      injectUserDetailsActivity(arg0);
    }

    private UserDetailsActivity injectUserDetailsActivity(UserDetailsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment2());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      UserDetailsActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
