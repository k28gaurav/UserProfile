// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.domain.interactor;

import com.gallery.app.domain.repository.UserRepository;
import com.gallery.app.rx.SchedulersFacade;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class EmailValidationUseCase_Factory implements Factory<EmailValidationUseCase> {
  private final Provider<SchedulersFacade> schedulersFacadeProvider;

  private final Provider<UserRepository> userRepositoryProvider;

  public EmailValidationUseCase_Factory(
      Provider<SchedulersFacade> schedulersFacadeProvider,
      Provider<UserRepository> userRepositoryProvider) {
    this.schedulersFacadeProvider = schedulersFacadeProvider;
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public EmailValidationUseCase get() {
    return provideInstance(schedulersFacadeProvider, userRepositoryProvider);
  }

  public static EmailValidationUseCase provideInstance(
      Provider<SchedulersFacade> schedulersFacadeProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return new EmailValidationUseCase(schedulersFacadeProvider.get(), userRepositoryProvider.get());
  }

  public static EmailValidationUseCase_Factory create(
      Provider<SchedulersFacade> schedulersFacadeProvider,
      Provider<UserRepository> userRepositoryProvider) {
    return new EmailValidationUseCase_Factory(schedulersFacadeProvider, userRepositoryProvider);
  }

  public static EmailValidationUseCase newEmailValidationUseCase(
      SchedulersFacade schedulersFacade, UserRepository userRepository) {
    return new EmailValidationUseCase(schedulersFacade, userRepository);
  }
}
