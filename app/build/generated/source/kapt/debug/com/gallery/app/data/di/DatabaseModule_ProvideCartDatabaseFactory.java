// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.data.di;

import android.content.Context;
import com.gallery.app.data.db.UserDatabse;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DatabaseModule_ProvideCartDatabaseFactory implements Factory<UserDatabse> {
  private final DatabaseModule module;

  private final Provider<Context> contextProvider;

  public DatabaseModule_ProvideCartDatabaseFactory(
      DatabaseModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public UserDatabse get() {
    return provideInstance(module, contextProvider);
  }

  public static UserDatabse provideInstance(
      DatabaseModule module, Provider<Context> contextProvider) {
    return proxyProvideCartDatabase(module, contextProvider.get());
  }

  public static DatabaseModule_ProvideCartDatabaseFactory create(
      DatabaseModule module, Provider<Context> contextProvider) {
    return new DatabaseModule_ProvideCartDatabaseFactory(module, contextProvider);
  }

  public static UserDatabse proxyProvideCartDatabase(DatabaseModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideCartDatabase(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
