// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.viewmodel;

import com.gallery.app.domain.interactor.EmailValidationUseCase;
import com.gallery.app.rx.SchedulersFacade;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class UserViewModel_Factory implements Factory<UserViewModel> {
  private final Provider<SchedulersFacade> schedulersFacadeProvider;

  private final Provider<EmailValidationUseCase> emailValidationUseCaseProvider;

  public UserViewModel_Factory(
      Provider<SchedulersFacade> schedulersFacadeProvider,
      Provider<EmailValidationUseCase> emailValidationUseCaseProvider) {
    this.schedulersFacadeProvider = schedulersFacadeProvider;
    this.emailValidationUseCaseProvider = emailValidationUseCaseProvider;
  }

  @Override
  public UserViewModel get() {
    return provideInstance(schedulersFacadeProvider, emailValidationUseCaseProvider);
  }

  public static UserViewModel provideInstance(
      Provider<SchedulersFacade> schedulersFacadeProvider,
      Provider<EmailValidationUseCase> emailValidationUseCaseProvider) {
    return new UserViewModel(schedulersFacadeProvider.get(), emailValidationUseCaseProvider.get());
  }

  public static UserViewModel_Factory create(
      Provider<SchedulersFacade> schedulersFacadeProvider,
      Provider<EmailValidationUseCase> emailValidationUseCaseProvider) {
    return new UserViewModel_Factory(schedulersFacadeProvider, emailValidationUseCaseProvider);
  }

  public static UserViewModel newUserViewModel(
      SchedulersFacade schedulersFacade, EmailValidationUseCase emailValidationUseCase) {
    return new UserViewModel(schedulersFacade, emailValidationUseCase);
  }
}
