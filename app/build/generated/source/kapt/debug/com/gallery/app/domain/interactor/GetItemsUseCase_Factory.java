// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.domain.interactor;

import com.gallery.app.domain.repository.UserRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class GetItemsUseCase_Factory implements Factory<GetItemsUseCase> {
  private final Provider<UserRepository> userRepositoryProvider;

  public GetItemsUseCase_Factory(Provider<UserRepository> userRepositoryProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public GetItemsUseCase get() {
    return provideInstance(userRepositoryProvider);
  }

  public static GetItemsUseCase provideInstance(Provider<UserRepository> userRepositoryProvider) {
    return new GetItemsUseCase(userRepositoryProvider.get());
  }

  public static GetItemsUseCase_Factory create(Provider<UserRepository> userRepositoryProvider) {
    return new GetItemsUseCase_Factory(userRepositoryProvider);
  }

  public static GetItemsUseCase newGetItemsUseCase(UserRepository userRepository) {
    return new GetItemsUseCase(userRepository);
  }
}
