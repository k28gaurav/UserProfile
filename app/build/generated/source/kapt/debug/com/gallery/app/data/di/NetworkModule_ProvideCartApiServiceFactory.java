// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.data.di;

import com.gallery.app.data.service.ApiService;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class NetworkModule_ProvideCartApiServiceFactory implements Factory<ApiService> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvideCartApiServiceFactory(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiService get() {
    return provideInstance(module, retrofitProvider);
  }

  public static ApiService provideInstance(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return proxyProvideCartApiService(module, retrofitProvider.get());
  }

  public static NetworkModule_ProvideCartApiServiceFactory create(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvideCartApiServiceFactory(module, retrofitProvider);
  }

  public static ApiService proxyProvideCartApiService(NetworkModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(
        instance.provideCartApiService(retrofit),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
