// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.domain.interactor;

import com.gallery.app.domain.repository.UserRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class SaveItemsUseCase_Factory implements Factory<SaveItemsUseCase> {
  private final Provider<UserRepository> userRepositoryProvider;

  public SaveItemsUseCase_Factory(Provider<UserRepository> userRepositoryProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
  }

  @Override
  public SaveItemsUseCase get() {
    return provideInstance(userRepositoryProvider);
  }

  public static SaveItemsUseCase provideInstance(Provider<UserRepository> userRepositoryProvider) {
    return new SaveItemsUseCase(userRepositoryProvider.get());
  }

  public static SaveItemsUseCase_Factory create(Provider<UserRepository> userRepositoryProvider) {
    return new SaveItemsUseCase_Factory(userRepositoryProvider);
  }

  public static SaveItemsUseCase newSaveItemsUseCase(UserRepository userRepository) {
    return new SaveItemsUseCase(userRepository);
  }
}
