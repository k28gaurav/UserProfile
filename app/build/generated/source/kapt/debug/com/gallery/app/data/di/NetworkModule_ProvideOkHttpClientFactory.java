// Generated by Dagger (https://google.github.io/dagger).
package com.gallery.app.data.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class NetworkModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<Context> contextProvider;

  public NetworkModule_ProvideOkHttpClientFactory(
      NetworkModule module, Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideInstance(module, contextProvider);
  }

  public static OkHttpClient provideInstance(
      NetworkModule module, Provider<Context> contextProvider) {
    return proxyProvideOkHttpClient(module, contextProvider.get());
  }

  public static NetworkModule_ProvideOkHttpClientFactory create(
      NetworkModule module, Provider<Context> contextProvider) {
    return new NetworkModule_ProvideOkHttpClientFactory(module, contextProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(NetworkModule instance, Context context) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpClient(context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
